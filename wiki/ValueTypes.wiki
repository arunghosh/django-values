#summary Descriptions of the types currently available

Because run-time values can only be edited by a super-user, value types only need to differentiate basic data types, rather than validate specific inputs. However, some number-validing types have been included for ease of administration.

*Note:* I'm open to adding new value types, these are simply the only ones that I've run into a need for so far.

= BooleanValue =

Displays a checkbox for administrative purposes, while providing `True` or `False` to Python code, depending on its status.

= DurationValue =

Accepts and validates a length of time, which would be made available to Python as a `timedelta` object. Particularly useful for timeouts and delays. For instance, a `DurationValue` could determine how long stories may be displayed on the front page before being removed, how long ads should run before requiring additional payment, or a maximum length for user-contributed audio or video content.

*Note*: The UI for this is still under consideration. Currently it just uses a simple text field to allow entry of seconds as a decimal (float). The easiest would be a series of text boxes corresponding to weeks, days, hours, minutes, seconds and microseconds, but that would get quite large if all were included. Perhaps an additional `resolution` parameter could be passed to the value constructor to limit it somewhat, so that the UI would then only show inputs for that resolution plus one more (for coarse- and fine-grained adjustment). Something like `values.DurationValue(resolution=values.MINUTES)` would show only hours and minutes.

= IntegerValue =

Accepts and validates an integer that is converted to int when accessed.

*Note:* there is no `SmallIntegerValue`, since `SmallIntegerField` exists primarily to control column size in the database representation of the model. Since all values are stored using a single model, the value is stored as `CharField(maxlength=255)`, so a `SmallIntegerValue` would provide no advantage whatsoever.

= PercentValue =

Accepts a number from 0 to 100, which is converted to float and divided by 100 when accessed. This enables the administration user to enter a value as a percentage (e.g., 60), while Python code can treat it as a decimal multiple (0.6). Consider the following:

{{{
class Product(models.Model):
    name = models.CharField(maxlength=255)
    price = models.FloatField(max_digits=5, decimal_places=2)

    sales_tax = values.PercentValue()

    def get_sales_tax(self):
        return self.price * Product.sales_tax
}}}

*Note*: The range of 0 to 100 probably won't work for all use cases, and thus may be lifted later on. It exists right now mostly as a proof of concept to show the different things that can be done to create value types.

= PositiveIntegerValue =

Like `IntegerValue`, but with a minimum value of 0.

= StringValue =

Accepts any string up to 255 characters, with is retrieved from the form and from the database as `str` already, so no conversion is necessary when accessing it from Python.

*Note:* This is likely to be used less often than the other value types, as strings aren't designed for use in calculations, which is the primary target for django-values. Instead, it might be used for storing a base URL for images, a temporary directory for cache storage, an output directory for logs, etc. These are all bad examples as they're unlikely to change, of course, but it's simple enough to implement and I expect others will find legitimate uses for it.